/**
 * @module hex-window
 * Basic hexed window. Can contain multiple panes (well, WILL be able to) that
 * display the window.
 */
"use strict";

import { app, ipcMain, BrowserWindow, dialog } from 'electron'; // Module to create native browser window.

import url from 'url';
import path from 'path';

import * as windowManager from './window-manager.js';

// Add IPC listeners. These mostly are to maintain our state about what files
// are open.
ipcMain.on('open-file', event => event.sender.hexed.showOpenDialog());

export default class HexedWindow {
  constructor() {
    this.window = new BrowserWindow({width: 800, height: 600});
    // I have a sneaking suspicion that the actual HTML file will be going away
    // and the entire document will be generated by code.
    this.window.loadURL(url.format({
      pathname: path.join(__dirname, 'app.html'),
      protocol: 'file:',
      slashes: true
    }));
    this.window.hexed = this;
    this.window.webContents.hexed = this;
    this._session = null;
    this._loaded = false;
    this._openFiles = [];
    this.window.webContents.on('will-navigate', (event) => {
      // Never load up new contents - prevents drag and drop from loading files
      // directly into the webview
      event.preventDefault();
    });
    this.window.webContents.on('did-finish-load', (event) => {
      this.window.webContents.send('set-id', this.id);
      this.window.emit('ready');
    });
    // Add this window to the window manager
    windowManager.addWindow(this);
  }

  get id() {
    return this.window.webContents.id;
  }

  on(event, handler) {
    // Pass through to the window
    this.window.on(event, handler);
  }

  once(event, handler) {
    this.window.once(event, handler);
  }
  /**
   * Open the given file/files. If given a string, opens that single file. If
   * given an array, opens all files given.
   */
  open(path) {
    if (typeof path == 'string') {
      this.window.webContents.send('open-files', [ path ]);
    } else if (Array.isArray(path)) {
      let paths = [];
      path.forEach(p => {
        if (typeof p === 'string') {
          paths.push(p);
        }
      });
      if (paths.length > 0) {
        this.window.webContents.send('open-files', paths);
        Array.prototype.push.apply(this._openFiles, paths);
      }
    }
  }

  /**
   * Show the open file dialog.
   */
  showOpenDialog() {
    dialog.showOpenDialog(this.window, {
      properties: [ 'openFile', 'treatPackageAsDirectory', 'multiSelections' ]
    }, files => {
      this.open(files);
    });
  }

  /**
   * Close an open pane.
   */
  closePane() {
    this.sendMenu('close-pane');
  }

  /**
   * Sends a notification that a menu option was chosen. These menu items have
   * no processing done on the "main process" side and are instead entirely
   * self-contained in the HTML side.
   */
  sendMenu(menu) {
    this.window.webContents.send('menu', menu);
  }
}
